---
title: "1. SpatRaster"
number-depth: 2
execute:
  echo: true
  output: asis
---

```{julia}
#| echo: false
#| output: false
using DocumenterQuarto
using SpatialRasterLite
```

# SpatRaster

`SpatRaster` is a simple spatial raster with WGS84 projection, abbreviated as `rast`.

<!-- ```{julia, echo=false}
@doc(SpatRaster)
``` -->

```julia
Base.@kwdef mutable struct SpatRaster{T,N} <: AbstractSpatRaster{T,N}
  A::AbstractArray{T,N}
  b::bbox = bbox(-180.0, -90.0, 180.0, 90.0)
  cellsize::NTuple{2,Real}
  lon::AbstractVector{<:Real}
  lat::AbstractVector{<:Real}
  time::Union{AbstractVector,Nothing} = nothing
  bands::Union{AbstractVector{String},Nothing} = nothing
  name::String = "Raster"
  nodata::Union{AbstractVector{T},Nothing} = nothing
end
```

- `A`        : The raster data array where T is the element type and N is the number of dimensions
- `b`        : Bounding box defining the spatial extent, defaults to global extent `bbox(-180.0, -90.0, 180.0, 90.0)`
- `cellsize` : Cell size in degrees as (longitude_size, latitude_size)  
- `lon`      : Longitude coordinates for each column
- `lat`      : Latitude coordinates for each row
- `time`     : Time dimension values (optional)
- `bands`    : Band names for multi-band rasters (optional)
- `name`     : Name identifier for the raster, defaults to "Raster"
- `nodata`   : No-data values for each band (optional)


## Construction

```{julia}
using SpatialRasterLite
using Dates

dates = Date(2010, 1, 1):Day(1):Date(2010, 1, 10)
ntime = length(dates)

ra = rast(rand(180, 90, ntime); time=dates)
ra
```

```{julia}
A = rand(70, 40)
b = bbox(70, 15, 140, 55) # China
rast(A, b)
```

## Subset

- `ra[i, j]` will automatically alter `lon`, `lat` and `bbox`. If both of `i` 
  and `j` are integer, value of ra.A[i, j] will be retrieved.

- `ra[i, j, k]` will additionally alter `bands`, and `time`

```{julia}
ra[1, 1]
ra[1:10, 1:10]
```

```{julia}
ra[1:10, 1:10, 1:2]
```

```{julia}
ra[1:10, 1:10, 1:1]
```

```{julia}
ra[1:10, 1:10, 1]
```

## crop

截取部分范围
